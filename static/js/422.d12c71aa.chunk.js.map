{"version":3,"file":"static/js/422.d12c71aa.chunk.js","mappings":"uQAsBA,MAlBA,SAAoBA,GAelB,OAAOC,EAAAA,EAAAA,KAAA,OAAAC,SAbEF,EAAMG,KAAKC,KAAI,SAACC,EAAeC,GACpC,OAAc,IAAVA,EACK,MAIPC,EAAAA,EAAAA,MAAA,OAAAL,SAAA,CACGI,EAAME,WAAWC,SAAS,GAAG,KAAGJ,IADzBC,EAId,KAIJ,ECnBA,EAA4B,gCAA5B,EAAoE,4BCgB9DI,EAAqB,CACzBC,MAAAA,EAAAA,GACAC,QAAAA,EAAAA,IAkDF,OA/CkBC,EAAAA,EAAAA,KARM,SAACC,GAAgB,MAAM,CAC7CC,KAAMD,EAAME,OAAOC,OAAOF,KAC3B,GAM0CL,EA+C3C,EAzCA,SAAsBV,GACpB,IAAMkB,GAAWC,EAAAA,EAAAA,KAUjB,OACEZ,EAAAA,EAAAA,MAAA,OAAKa,UAAWC,EAAiBnB,SAAA,EAC/BK,EAAAA,EAAAA,MAACe,EAAAA,EAAI,CAACF,UAAWC,EAAanB,SAAA,EAC5BD,EAAAA,EAAAA,KAACqB,EAAAA,EAAKC,OAAM,CAAArB,SAAEF,EAAMwB,UACpBjB,EAAAA,EAAAA,MAACe,EAAAA,EAAKG,KAAI,CAAAvB,SAAA,EACRD,EAAAA,EAAAA,KAACyB,EAAAA,EAAW,CACVC,SAVV,SAAuBC,GACrB5B,EAAMY,QAAQgB,EAAMC,cAAcxB,MACpC,EASUyB,YAAY,OACZC,IAAKb,EACLb,MAAOL,EAAMe,QAEfd,EAAAA,EAAAA,KAAC+B,EAAAA,EAAa,CAAA9B,UACZD,EAAAA,EAAAA,KAACgC,EAAAA,EAAW,CAAA/B,UACVD,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QArBpB,WACEnC,EAAMW,OACR,EAmB2CyB,QAAQ,SAAQlC,SAAC,qBAOxDK,EAAAA,EAAAA,MAACe,EAAAA,EAAI,CAAApB,SAAA,EACHD,EAAAA,EAAAA,KAACqB,EAAAA,EAAKC,OAAM,CAAArB,SAAC,YACbD,EAAAA,EAAAA,KAACqB,EAAAA,EAAKG,KAAI,CAAAvB,UACRD,EAAAA,EAAAA,KAACoC,EAAU,CAAClC,KAAM,IAAImC,EAAAA,GAAatC,EAAMe,MAAMwB,wBAKzD,IClDA,MARA,WACE,OACEtC,EAAAA,EAAAA,KAACuC,EAAAA,EAAY,CAACC,YANhB,kJAM+CC,MAR9B,gBAQgDxC,UAC7DD,EAAAA,EAAAA,KAAC0C,EAAY,CAACnB,OAAO,mEAG3B,C","sources":["Features/Cipher/Caesar/CaesarList.tsx","webpack://puzztool/./src/Features/Cipher/Caesar/CaesarStream.module.scss?5150","Features/Cipher/Caesar/CaesarStream.tsx","Features/Cipher/Caesar/index.tsx"],"sourcesContent":["interface Props {\n  list: string[];\n}\n\nfunction CaesarList(props: Props) {\n  function renderListItems() {\n    return props.list.map((value: string, index: number) => {\n      if (index === 0) {\n        return null;\n      }\n\n      return (\n        <div key={index}>\n          {index.toString().padStart(2)}: {value}\n        </div>\n      );\n    });\n  }\n\n  return <pre>{renderListItems()}</pre>;\n}\n\nexport default CaesarList;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"CaesarStream_container__-fIg2\",\"input\":\"CaesarStream_input__aSRMd\"};","import { CaesarString } from \"puzzle-lib\";\nimport { ChangeEvent, ReactChild } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\nimport Card from \"react-bootstrap/Card\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { useFocusInput } from \"../../../Hooks/FocusInput\";\nimport { RootState } from \"../../../Store/rootReducer\";\nimport { clear, setText } from \"./caesarCipherSlice\";\nimport CaesarList from \"./CaesarList\";\nimport styles from \"./CaesarStream.module.scss\";\n\nconst mapStateToProps = (state: RootState) => ({\n  text: state.cipher.caesar.text,\n});\nconst mapDispatchToProps = {\n  clear,\n  setText,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface Props extends ConnectedProps<typeof connector> {\n  prompt: ReactChild | ReactChild[];\n}\n\nfunction CaesarStream(props: Props) {\n  const inputRef = useFocusInput();\n\n  function onClearClick() {\n    props.clear();\n  }\n\n  function onTextChanged(event: ChangeEvent<HTMLInputElement>) {\n    props.setText(event.currentTarget.value);\n  }\n\n  return (\n    <div className={styles.container}>\n      <Card className={styles.input}>\n        <Card.Header>{props.prompt}</Card.Header>\n        <Card.Body>\n          <FormControl\n            onChange={onTextChanged}\n            placeholder=\"Text\"\n            ref={inputRef}\n            value={props.text}\n          />\n          <ButtonToolbar>\n            <ButtonGroup>\n              <Button onClick={onClearClick} variant=\"danger\">\n                Clear\n              </Button>\n            </ButtonGroup>\n          </ButtonToolbar>\n        </Card.Body>\n      </Card>\n      <Card>\n        <Card.Header>Output</Card.Header>\n        <Card.Body>\n          <CaesarList list={new CaesarString(props.text).getRotations()} />\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default connector(CaesarStream);\n","import PuzzToolPage from \"../../../Common/PuzzToolPage\";\nimport CaesarStream from \"./CaesarStream\";\n\nconst PAGE_TITLE = \"Caesar Cipher\";\nconst PAGE_DESCRIPTION =\n  \"A Caesar cipher works by shifting every letter by \" +\n  \"a fixed amount. This is a simple cipher - there are only 25 different \" +\n  \"shifts for each letter.\";\n\nfunction Caesar() {\n  return (\n    <PuzzToolPage description={PAGE_DESCRIPTION} title={PAGE_TITLE}>\n      <CaesarStream prompt=\"Type in your text, and all possible shifts will be displayed.\" />\n    </PuzzToolPage>\n  );\n}\n\nexport default Caesar;\n"],"names":["props","_jsx","children","list","map","value","index","_jsxs","toString","padStart","mapDispatchToProps","clear","setText","connect","state","text","cipher","caesar","inputRef","useFocusInput","className","styles","Card","Header","prompt","Body","FormControl","onChange","event","currentTarget","placeholder","ref","ButtonToolbar","ButtonGroup","Button","onClick","variant","CaesarList","CaesarString","getRotations","PuzzToolPage","description","title","CaesarStream"],"sourceRoot":""}