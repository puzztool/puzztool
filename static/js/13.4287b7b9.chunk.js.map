{"version":3,"sources":["Features/Encoding/AutoConvert/AutoConvertStream.module.scss","Features/Encoding/AutoConvert/AutoConvertStream.tsx","Features/Encoding/AutoConvert/index.tsx"],"names":["module","exports","ConversionMode","mapDispatchToProps","clear","setHomogeneous","setText","connector","connect","state","homogeneous","encoding","autoConvert","text","props","inputRef","useFocusInput","className","styles","container","Card","input","Header","prompt","Body","FormControl","onChange","event","currentTarget","value","placeholder","ref","ButtonToolbar","ToggleButtonGroup","name","consistent","type","mixed","ToggleButton","id","variant","ButtonGroup","Button","onClick","StringAutoConvert","convertString","AutoConvert","PuzzToolPage","description","title"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,UAAY,qCAAqC,MAAQ,mC,4CCctEC,E,yIAAAA,O,2BAAAA,I,kBAAAA,M,KAKL,IAIMC,EAAqB,CACzBC,UACAC,mBACAC,aAgFaC,MA7EGC,aAVM,SAACC,GAAD,MAAuB,CAC7CC,YAAaD,EAAME,SAASC,YAAYF,YACxCG,KAAMJ,EAAME,SAASC,YAAYC,QAQQV,EA6E5BI,EAvEf,SAA2BO,GACzB,IAAMC,EAAWC,cAUjB,OACE,sBAAKC,UAAWC,IAAOC,UAAvB,UACE,eAACC,EAAA,EAAD,CAAMH,UAAWC,IAAOG,MAAxB,UACE,cAACD,EAAA,EAAKE,OAAN,UAAcR,EAAMS,SACpB,eAACH,EAAA,EAAKI,KAAN,WACE,cAACC,EAAA,EAAD,CACEC,SAVV,SAAuBC,GACrBb,EAAMR,QAAQqB,EAAMC,cAAcC,QAU1BC,YAAY,OACZC,IAAKhB,EACLc,MAAOf,EAAMD,OAEf,eAACmB,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CACEC,KAAK,gCACLR,SAAU,SAACG,GAAD,OACRf,EAAMT,eAAewB,IAAU3B,EAAeiC,aAEhDC,KAAK,QACLP,MACEf,EAAMJ,YACFR,EAAeiC,WACfjC,EAAemC,MATvB,UAYE,cAACC,EAAA,EAAD,CACEC,GAAG,2CACHV,MAAO3B,EAAeiC,WACtBK,QAAQ,kBAHV,wBAOA,cAACF,EAAA,EAAD,CACEC,GAAG,sCACHV,MAAO3B,EAAemC,MACtBG,QAAQ,kBAHV,sBAQF,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,QAhDpB,WACE7B,EAAMV,SA+CmCoC,QAAQ,SAAvC,8BAOR,eAACpB,EAAA,EAAD,WACE,cAACA,EAAA,EAAKE,OAAN,qBACA,cAACF,EAAA,EAAKI,KAAN,UACE,8BACGoB,oBAAkBC,cAAc/B,EAAMD,KAAMC,EAAMJ,cACjD,iBClECoC,UARf,WACE,OACE,cAACC,EAAA,EAAD,CAAcC,YAtBd,qCACE,uQAKA,qEAGA,+BACE,oDACA,oEACA,2EACA,oDACA,8DAQyCC,MAAM,cAAnD,SACE,cAAC,EAAD,CAAmB1B,OAAO","file":"static/js/13.4287b7b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AutoConvertStream_container__2jVdi\",\"input\":\"AutoConvertStream_input__1QBf3\"};","import { StringAutoConvert } from \"puzzle-lib\";\nimport { ChangeEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\nimport Card from \"react-bootstrap/Card\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { useFocusInput } from \"../../../Hooks/FocusInput\";\nimport { RootState } from \"../../../Store/rootReducer\";\nimport { clear, setHomogeneous, setText } from \"./autoConvertSlice\";\nimport styles from \"./AutoConvertStream.module.scss\";\n\nenum ConversionMode {\n  consistent,\n  mixed,\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  homogeneous: state.encoding.autoConvert.homogeneous,\n  text: state.encoding.autoConvert.text,\n});\nconst mapDispatchToProps = {\n  clear,\n  setHomogeneous,\n  setText,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface Props extends ConnectedProps<typeof connector> {\n  prompt: JSX.Element | string;\n}\n\nfunction AutoConvertStream(props: Props) {\n  const inputRef = useFocusInput();\n\n  function onClearClick() {\n    props.clear();\n  }\n\n  function onTextChanged(event: ChangeEvent<HTMLInputElement>) {\n    props.setText(event.currentTarget.value);\n  }\n\n  return (\n    <div className={styles.container}>\n      <Card className={styles.input}>\n        <Card.Header>{props.prompt}</Card.Header>\n        <Card.Body>\n          <FormControl\n            onChange={onTextChanged}\n            placeholder=\"Text\"\n            ref={inputRef}\n            value={props.text}\n          />\n          <ButtonToolbar>\n            <ToggleButtonGroup\n              name=\"AutoConvertStream-homogeneous\"\n              onChange={(value) =>\n                props.setHomogeneous(value === ConversionMode.consistent)\n              }\n              type=\"radio\"\n              value={\n                props.homogeneous\n                  ? ConversionMode.consistent\n                  : ConversionMode.mixed\n              }\n            >\n              <ToggleButton\n                id=\"AutoConvertStream-homogeneous-consistent\"\n                value={ConversionMode.consistent}\n                variant=\"outline-primary\"\n              >\n                Consistent\n              </ToggleButton>\n              <ToggleButton\n                id=\"AutoConvertStream-homogeneous-mixed\"\n                value={ConversionMode.mixed}\n                variant=\"outline-primary\"\n              >\n                Mixed\n              </ToggleButton>\n            </ToggleButtonGroup>\n            <ButtonGroup>\n              <Button onClick={onClearClick} variant=\"danger\">\n                Clear\n              </Button>\n            </ButtonGroup>\n          </ButtonToolbar>\n        </Card.Body>\n      </Card>\n      <Card>\n        <Card.Header>Output</Card.Header>\n        <Card.Body>\n          <pre>\n            {StringAutoConvert.convertString(props.text, props.homogeneous) ||\n              \" \"}\n          </pre>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default connector(AutoConvertStream);\n","import PuzzToolPage from '../../../Common/PuzzToolPage';\nimport AutoConvertStream from './AutoConvertStream';\n\nfunction getDescription() {\n  return (\n    <>\n      <p>\n        AutoConvert will automatically detect and convert several encodings - simply enter your ciphertext.\n        If all of your text is in the same encoding, you can select \"force consistent encoding\".\n        This can be useful for ambigious strings.\n      </p>\n      <p>\n        Some of the supported encodings are:\n      </p>\n      <ul>\n        <li>ASCII (A=65, B=66)</li>\n        <li>Five bit binary (A=00001, B=00010)</li>\n        <li>Eight bit binary (A=01100001, B=01100010)</li>\n        <li>Ordinal (A=1, B=2)</li>\n        <li>Ternary (A=001, E=012)</li>\n      </ul>\n    </>\n  );\n}\n\nfunction AutoConvert() {\n  return (\n    <PuzzToolPage description={getDescription()} title=\"AutoConvert\">\n      <AutoConvertStream prompt=\"Input\" />\n    </PuzzToolPage>\n  );\n}\n\nexport default AutoConvert;\n"],"sourceRoot":""}