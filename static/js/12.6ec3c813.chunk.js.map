{"version":3,"sources":["Features/Cipher/Caesar/CaesarStream.module.scss","Features/Cipher/Caesar/CaesarList.tsx","Features/Cipher/Caesar/CaesarStream.tsx","Features/Cipher/Caesar/index.tsx"],"names":["module","exports","CaesarList","props","list","map","value","index","toString","padStart","mapDispatchToProps","clear","setText","connector","connect","state","text","cipher","caesar","inputRef","useFocusInput","className","styles","container","Card","input","Header","prompt","Body","FormControl","onChange","event","currentTarget","placeholder","ref","ButtonToolbar","ButtonGroup","Button","onClick","variant","CaesarString","getRotations","Caesar","PuzzToolPage","description","title"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,UAAY,gCAAgC,MAAQ,8B,wICqBvDC,MAlBf,SAAoBC,GAelB,OAAO,8BAbEA,EAAMC,KAAKC,KAAI,SAACC,EAAeC,GACpC,OAAc,IAAVA,EACK,KAIP,gCACGA,EAAMC,WAAWC,SAAS,GAD7B,KACmCH,IADzBC,S,kBCKZG,EAAqB,CACzBC,UACAC,aAkDaC,MA/CGC,aARM,SAACC,GAAD,MAAuB,CAC7CC,KAAMD,EAAME,OAAOC,OAAOF,QAOeN,EA+C5BG,EAzCf,SAAsBV,GACpB,IAAMgB,EAAWC,cAUjB,OACE,sBAAKC,UAAWC,IAAOC,UAAvB,UACE,eAACC,EAAA,EAAD,CAAMH,UAAWC,IAAOG,MAAxB,UACE,cAACD,EAAA,EAAKE,OAAN,UAAcvB,EAAMwB,SACpB,eAACH,EAAA,EAAKI,KAAN,WACE,cAACC,EAAA,EAAD,CACEC,SAVV,SAAuBC,GACrB5B,EAAMS,QAAQmB,EAAMC,cAAc1B,QAU1B2B,YAAY,OACZC,IAAKf,EACLb,MAAOH,EAAMa,OAEf,cAACmB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,QArBpB,WACEnC,EAAMQ,SAoBmC4B,QAAQ,SAAvC,6BAOR,eAACf,EAAA,EAAD,WACE,cAACA,EAAA,EAAKE,OAAN,qBACA,cAACF,EAAA,EAAKI,KAAN,UACE,cAAC,EAAD,CAAYxB,KAAM,IAAIoC,eAAarC,EAAMa,MAAMyB,4BC7C1CC,UARf,WACE,OACE,cAACC,EAAA,EAAD,CAAcC,YANhB,kJAM+CC,MAR9B,gBAQf,SACE,cAAC,EAAD,CAAclB,OAAO","file":"static/js/12.6ec3c813.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CaesarStream_container__1hRLq\",\"input\":\"CaesarStream_input__3s63W\"};","interface Props {\n  list: string[];\n}\n\nfunction CaesarList(props: Props) {\n  function renderListItems() {\n    return props.list.map((value: string, index: number) => {\n      if (index === 0) {\n        return null;\n      }\n\n      return (\n        <div key={index}>\n          {index.toString().padStart(2)}: {value}\n        </div>\n      );\n    });\n  }\n\n  return <pre>{renderListItems()}</pre>;\n}\n\nexport default CaesarList;\n","import { CaesarString } from \"puzzle-lib\";\nimport { ChangeEvent, ReactChild } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\nimport Card from \"react-bootstrap/Card\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { useFocusInput } from \"../../../Hooks/FocusInput\";\nimport { RootState } from \"../../../Store/rootReducer\";\nimport { clear, setText } from \"./caesarCipherSlice\";\nimport CaesarList from \"./CaesarList\";\nimport styles from \"./CaesarStream.module.scss\";\n\nconst mapStateToProps = (state: RootState) => ({\n  text: state.cipher.caesar.text,\n});\nconst mapDispatchToProps = {\n  clear,\n  setText,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface Props extends ConnectedProps<typeof connector> {\n  prompt: ReactChild | ReactChild[];\n}\n\nfunction CaesarStream(props: Props) {\n  const inputRef = useFocusInput();\n\n  function onClearClick() {\n    props.clear();\n  }\n\n  function onTextChanged(event: ChangeEvent<HTMLInputElement>) {\n    props.setText(event.currentTarget.value);\n  }\n\n  return (\n    <div className={styles.container}>\n      <Card className={styles.input}>\n        <Card.Header>{props.prompt}</Card.Header>\n        <Card.Body>\n          <FormControl\n            onChange={onTextChanged}\n            placeholder=\"Text\"\n            ref={inputRef}\n            value={props.text}\n          />\n          <ButtonToolbar>\n            <ButtonGroup>\n              <Button onClick={onClearClick} variant=\"danger\">\n                Clear\n              </Button>\n            </ButtonGroup>\n          </ButtonToolbar>\n        </Card.Body>\n      </Card>\n      <Card>\n        <Card.Header>Output</Card.Header>\n        <Card.Body>\n          <CaesarList list={new CaesarString(props.text).getRotations()} />\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default connector(CaesarStream);\n","import PuzzToolPage from \"../../../Common/PuzzToolPage\";\nimport CaesarStream from \"./CaesarStream\";\n\nconst PAGE_TITLE = \"Caesar Cipher\";\nconst PAGE_DESCRIPTION =\n  \"A Caesar cipher works by shifting every letter by \" +\n  \"a fixed amount. This is a simple cipher - there are only 25 different \" +\n  \"shifts for each letter.\";\n\nfunction Caesar() {\n  return (\n    <PuzzToolPage description={PAGE_DESCRIPTION} title={PAGE_TITLE}>\n      <CaesarStream prompt=\"Type in your text, and all possible shifts will be displayed.\" />\n    </PuzzToolPage>\n  );\n}\n\nexport default Caesar;\n"],"sourceRoot":""}